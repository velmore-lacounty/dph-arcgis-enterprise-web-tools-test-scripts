# -*- coding: utf-8 -*-"""Description: This is a minimalist Python toolbox developed for the purpose oftesting/troubleshooting the publication of ArcGIS Pro script tools and Pythontoolboxes to the DPH ArcGIS Enterprise portal.Author: Victoria ElmoreDate: 8/4/2025"""import arcpyclass Toolbox:    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Web Tools Toolbox Test"        self.alias = "webToolsToolboxTest"        # List of tool classes associated with this toolbox        self.tools = [CapitalizeTool]class CapitalizeTool:    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Print Message in All Caps"        self.description = "Prints an input string as a tool message in ALL CAPS."    def getParameterInfo(self):        """Define the tool parameters."""        # parameter 0        input_str = arcpy.Parameter(            displayName="Message to capitalize and print",            name="input_string",            datatype="GPString",            parameterType="Required",            direction="Input"        )        # parameter 1        output_str = arcpy.Parameter(            displayName="Message that will be printed",            name="output_string",            datatype="GPString",            parameterType="Derived",            direction="Output"        )        params = [input_str, output_str]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        input_string = parameters[0].valueAsText        messages.addMessage(f"User input: {input_string}")        try:            output_string = input_string.upper()        except:            output_string = "Missing or invalid user input."        messages.addMessage(f"Tool output: {output_string}")        parameters[1].value = output_string        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return